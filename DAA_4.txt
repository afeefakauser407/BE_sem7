def knapsack_dp(weights, values, capacity):
    n = len(values)
    # Create a 2D DP table with dimensions (n+1) x (capacity+1) initialized to 0
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    # Fill the DP table
    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] <= w:
                # Item i can be included: max of including or excluding the item
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]])
            else:
                # Item i cannot be included
                dp[i][w] = dp[i - 1][w]

    return dp[n][capacity]  # The maximum value is in the bottom-right corner

# Example items (weights and values) and knapsack capacity
weights = [10, 20, 30]
values = [60, 100, 120]
capacity = 50

# Run 0-1 Knapsack
max_value = knapsack_dp(weights, values, capacity)
print("Maximum value in Knapsack:", max_value)
